<?xml version="1.0" encoding="iso-8859-1" ?>
<!-- $Revision: 1.2 $ -->

<refentry id="{@id}">

 <refnamediv>
  <refname><function>HTML_Progress::sleep</function></refname>
  <refpurpose>delays execution of the progress meter</refpurpose>
 </refnamediv>

 <refsect1 id="{@id synopsis}">
  <title>Synopsis</title>
 <refsynopsisdiv>
  <funcsynopsis>
   <funcsynopsisinfo>
    require_once 'HTML/Progress.php'; 
   </funcsynopsisinfo>
   <funcprototype>
    <funcdef>void <function>HTML_Progress::sleep</function></funcdef>
    <void/>
   </funcprototype>
  </funcsynopsis>
 </refsynopsisdiv>
 </refsect1>

 <refsect1 id="{@id description}">
  <title>Description</title>
  <para>
   This method is used to delay execution of the progress meter.
  </para>
  <para>
   This is the default user callback called by {@tutorial progress.process.pkg} in
   the do-while loop of the {@tutorial progress.run.pkg} method.
  </para>
 </refsect1>

 <refsect1 id="{@id note}">
  <title>Note</title>
  <simpara>
   ( HTML_Progress >= 1.2.0RC3 )
  </simpara>
  <para>
   <important>
    This function can not be called statically.
   </important>
  </para>
  <para>
   <tip>
    Useful when you want to show some demonstrations. In real world, there is no need
    to delay execution because the user-task (process) should be long enough to make 
    a smooth animation. If it was not the case, then use the HTML_Progress::setAnimSpeed method.
   </tip>
  </para>
  <para>
   <note>
    The function {@link http://www.php.net/manual/en/function.usleep.php}
    did not work on Windows systems until PHP 5.0.0;
    For PHP4 on Windows platform, HTML_Progress uses a empty-for loop to delay execution.
   </note>
  </para>
 </refsect1>

 <refsect1 id="{@id see}">
  <title>See</title>
  <para>
   {@tutorial progress.setanimspeed.pkg},
   {@tutorial progress.process.pkg},
   {@tutorial progress.run.pkg},
   {@tutorial progress.setprogresshandler.pkg}
  </para>
 </refsect1>

 <refsect1 id="{@id example}">
  <title>Example</title>
  <para>
   <simpara>
    Example below (that requires HTML_Progress >= 1.2.0RC3) demonstrates usage of 
    a simple user callback (lines 10 to 13, and 18), which only wait 1 second (line 16).
   </simpara>
   <example>
    {@example sleep.php}
   </example>
  </para>
 </refsect1>

</refentry>

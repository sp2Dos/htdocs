
<refentry id="{@id}">

 <refnamediv>
  <refname>Getting Started</refname>
  <refpurpose>learn all features of HTML_Progress package</refpurpose>
 </refnamediv>

 <refsect2 id="{@id intro}">
  <title>Introduction</title>
  <para>
   In a series of tutorials, we give the new users of HTML_Progress an overview of its features
   and usage patterns. 
   It describes a small subset of available functionality, but points to the parts of 
   the documentation that give a more in-depth overview.
  </para>
 </refsect2>
 
 <refsect2 id="{@id first-progressmeter}">
  <title>Your first progress meter</title>
  <para>
   Create a <emphasis>simple progress meter</emphasis> from scratch, 
   and learn the basic concepts of HTML_Progress with {@tutorial part2-firstprogressmeter.pkg}. 
  </para>
 </refsect2>

 <refsect2 id="{@id patterns}">
  <title>Master and slave patterns</title>
  <para>
   Control a long task running with <emphasis>master and slave</emphasis> patterns.
   Choose to use or not the {@tutorial part2-progresshandler.pkg} feature.
  </para>
 </refsect2>

 <refsect2 id="{@id error-handling}">
  <title>Error handling</title>
  <para>
   <emphasis>Handle error</emphasis> both simple and advanced with the new 
   {@tutorial part2-errorhandling.pkg error-handling plug-in} comes with version 1.2.0
  </para>
 </refsect2>

 <refsect2 id="{@id indeterminate}">
  <title>Indeterminate mode</title>
  <para>
   Sometimes you can't immediately determine the length of a long-running task, 
   or the task might stay stuck at the same state of completion for a long time.
   So how to animate a progress bar to show unknown length-task activity ?
   <simpara>
    We will learn, with two examples, how to {@tutorial part2-indeterminate.pkg use indeterminate mode}.
    The first example apply basic concept, and the second example show an integration
    with a progress monitor.
   </simpara>
  </para>
 </refsect2>

 <refsect2 id="{@id observer-pattern}">
  <title>Observer Pattern</title>
  <para>
   The <classname>HTML_Progress_Observer</classname> class provides an implementation 
   of the observer pattern. It provide a mechanism which you can examine each important event 
   as it is happened and respond to them in a specific way.
   <simpara>
    Lets discover our {@tutorial part2-observer.pkg series of example} to see what we can do with it.
   </simpara>
  </para>
 </refsect2>

 <refsect2 id="{@id observer-pattern}">
  <title>Monitoring functions v2 </title>
  <para>
   This tutorial is based on version #2 of <classname>HTML_Progress_Monitor</classname> class 
   cames with HTML_Progress 1.1.
   Make sure that you use the good version otherwise things might not works as specified.
   <para>
    <caution>
     If you still use HTML_Progress 1.0, and won't plan to migrate to version 1.1 or greater, then
     you should read and follow instructions into article available 
     at {@link http://laurent-laville.org/spip/article.php3?id_article=9}.
    </caution>
   </para>
   <para>
    The <classname>HTML_Progress_Monitor</classname> class allows to display and manage 
    a progress bar inside a dialog box (renders are customizable, and both mode 
    determinate/indeterminate are supported). 
    Progress process may be stop at any time by a user action (click on Cancel button).
    <simplepara>
     Lets see what we can display with the new QF rendering system 
     ({@link http://pear.php.net/manual/en/package.html.html-quickform.intro-renderers.php})
     in our {@tutorial part2-monitor.pkg series of example}.
    </simplepara>
   </para>
  </para>
 </refsect2>

</refentry>
